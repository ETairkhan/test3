class TodoApp {
    async startTask(id) {
        try {
            if (!id || id.length === 0) {
                throw new Error('Invalid task ID');
            }
            await window.go.main.App.UpdateTaskStatus(id, 'in_progress');
            await this.loadTasks();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É: ' + error.message);
        }
    }
    constructor() {
        this.tasks = [];
        this.currentFilter = 'all';
        this.currentSort = 'date';
        this.theme = 'light';
        this.taskToDelete = null;
        
        this.initializeElements();
        this.bindEvents();
        this.loadTheme();
        this.loadTasks();
    }

    initializeElements() {
        // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
        this.taskInput = document.getElementById('taskInput');
        this.prioritySelect = document.getElementById('prioritySelect');
        this.taskDescInput = document.getElementById('taskDescInput');
        this.startDateInput = document.getElementById('startDateInput');
        this.endDateInput = document.getElementById('endDateInput');
        this.addTaskBtn = document.getElementById('addTaskBtn');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.filterBtns = document.querySelectorAll('.filter-btn');
        this.sortSelect = document.getElementById('sortSelect');
        this.themeToggle = document.getElementById('themeToggle');
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–¥–∞—á
        this.tasksContainer = document.getElementById('tasksContainer');
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.deleteModal = document.getElementById('deleteModal');
        this.deleteModalText = document.getElementById('deleteModalText');
        this.cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
        this.confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    }

    bindEvents() {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        this.addTaskBtn.addEventListener('click', () => this.addTask());
        this.taskInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.addTask();
        });

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        this.filterBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const filter = e.target.dataset.filter;
                this.setFilter(filter);
            });
        });

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        this.sortSelect.addEventListener('change', (e) => {
            this.currentSort = e.target.value;
            this.renderTasks();
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        this.themeToggle.addEventListener('click', () => this.toggleTheme());

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.cancelDeleteBtn.addEventListener('click', () => this.hideDeleteModal());
        this.confirmDeleteBtn.addEventListener('click', () => this.deleteTask());
    }

    async loadTasks() {
        try {
            this.tasks = await window.go.main.App.GetTasks();
            console.log('Loaded tasks:', this.tasks); // Debug log
            this.renderTasks();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error);
        }
    }

    async addTask() {
        const title = this.taskInput.value.trim();
        const desc = this.taskDescInput.value.trim();
        if (!title) return;

        try {
            // Convert priority from string to int
            let priority = 2; // default medium
            switch (this.prioritySelect.value) {
                case 'low': priority = 1; break;
                case 'medium': priority = 2; break;
                case 'high': priority = 3; break;
            }

            // Handle deadline date
            let deadline = null;
            if (this.endDateInput.value) {
                deadline = new Date(this.endDateInput.value).toISOString();
            }

            const task = {
                ID: this.generateUUID(), 
                Title: title,
                Body: desc,
                Priority: priority,
                Status: "not_started",
                CreatedAt: new Date().toISOString(),
                Deadline: deadline,
                Done: false
            };

            console.log('Creating task:', task); // Debug log
            
            await window.go.main.App.CreateTask(task);
            
            // Reload tasks to get the updated list with IDs
            await this.loadTasks();
            
            // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
            this.taskInput.value = '';
            this.taskDescInput.value = '';
            this.startDateInput.value = '';
            this.endDateInput.value = '';
            this.prioritySelect.value = 'medium';
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: ' + error.message);
        }
    }

    async toggleTask(id) {
        try {
            console.log('Toggling task:', id);
            if (!id || id.length === 0) {
                throw new Error('Invalid task ID');
            }
            // Find the current task to determine new status
            const task = this.tasks.find(t => {
                const taskId = t.ID || t.id || '';
                return taskId === id;
            });
            if (!task) {
                console.error('Task not found:', id);
                return;
            }
            let newStatus;
            const currentStatus = task.Status || task.status;
            if (currentStatus === 'done') {
                newStatus = 'not_started';
            } else if (currentStatus === 'in_progress') {
                newStatus = 'done';
            } else {
                newStatus = 'done';
            }
            console.log('Updating status:', id, '->', newStatus);
            await window.go.main.App.UpdateTaskStatus(id, newStatus);
            await this.loadTasks();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É: ' + error.message);
        }
    }

    showDeleteModal(task) {
        this.taskToDelete = task;
        this.deleteModalText.textContent = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${task.Title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"?`;
        this.deleteModal.style.display = 'flex';
    }

    hideDeleteModal() {
        this.taskToDelete = null;
        this.deleteModal.style.display = 'none';
    }

    async deleteTask() {
        if (!this.taskToDelete) return;

        try {
            console.log('Deleting task:', this.taskToDelete);
            // Make sure we have the correct ID field
            const taskId = this.taskToDelete.ID || this.taskToDelete.id;
            if (!taskId || taskId.length === 0) {
                throw new Error('Invalid task ID');
            }
            
            await window.go.main.App.DeleteTask(taskId);
            await this.loadTasks(); // Reload tasks after deletion
            this.hideDeleteModal();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É: ' + (error.message || 'Unknown error'));
        }
    }

    setFilter(filter) {
        this.currentFilter = filter;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        this.filterBtns.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.filter === filter);
        });
        
        // For now, just reload all tasks - you can implement filtering later
        this.loadTasks();
    }

    toggleTheme() {
        this.theme = this.theme === 'light' ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', this.theme);
        this.themeToggle.textContent = this.theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
        localStorage.setItem('theme', this.theme);
    }

    loadTheme() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        this.theme = savedTheme;
        document.documentElement.setAttribute('data-theme', savedTheme);
        this.themeToggle.textContent = savedTheme === 'light' ? 'üåô' : '‚òÄÔ∏è';
    }



    renderTasks() {
        if (!this.tasks || this.tasks.length === 0) {
            this.tasksContainer.innerHTML = '<div class="empty-state">–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É
        let filteredTasks = this.tasks;
        const now = new Date();
        const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const endOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);

    // –ù–µ–¥–µ–ª—è: —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
    const startOfWeek = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    // endOfWeek: –±–ª–∏–∂–∞–π—à–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 23:59:59.999
    const endOfWeek = new Date(now.getFullYear(), now.getMonth(), now.getDate() + (7 - now.getDay()));
    endOfWeek.setHours(23, 59, 59, 999);

        switch (this.currentFilter) {
            case 'active':
                filteredTasks = this.tasks.filter(task => (task.Status || task.status) === 'in_progress');
                break;
            case 'completed':
                filteredTasks = this.tasks.filter(task => (task.Status || task.status) === 'done');
                break;
            case 'today':
                filteredTasks = this.tasks.filter(task => {
                    const deadlineStr = task.Deadline || task.deadline;
                    if (!deadlineStr) return false;
                    const deadline = new Date(deadlineStr);
                    return deadline >= startOfToday && deadline < endOfToday;
                });
                break;
            case 'week':
                filteredTasks = this.tasks.filter(task => {
                    const deadlineStr = task.Deadline || task.deadline;
                    if (!deadlineStr) return false;
                    const deadline = new Date(deadlineStr);
                    return deadline >= startOfToday && deadline <= endOfWeek;
                });
                break;
            case 'overdue':
                filteredTasks = this.tasks.filter(task => {
                    const deadlineStr = task.Deadline || task.deadline;
                    if (!deadlineStr) return false;
                    const deadline = new Date(deadlineStr);
                    return deadline < now && (task.Status || task.status) !== 'done';
                });
                break;
            case 'all':
            default:
                // –í—Å–µ –∑–∞–¥–∞—á–∏
                filteredTasks = this.tasks;
        }

        if (!filteredTasks || filteredTasks.length === 0) {
            this.tasksContainer.innerHTML = '<div class="empty-state">–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }

        console.log('Rendering tasks:', filteredTasks);

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á
        let sortedTasks = [...filteredTasks];
        switch (this.currentSort) {
            case 'priority-asc':
                sortedTasks.sort((a, b) => (a.Priority || a.priority || 0) - (b.Priority || b.priority || 0));
                break;
            case 'priority-desc':
                sortedTasks.sort((a, b) => (b.Priority || b.priority || 0) - (a.Priority || a.priority || 0));
                break;
            case 'date-asc':
                sortedTasks.sort((a, b) => {
                    const aDate = new Date(a.CreatedAt || a.created_at || a.createdAt || 0);
                    const bDate = new Date(b.CreatedAt || b.created_at || b.createdAt || 0);
                    return aDate - bDate;
                });
                break;
            case 'date-desc':
            default:
                sortedTasks.sort((a, b) => {
                    const aDate = new Date(a.CreatedAt || a.created_at || a.createdAt || 0);
                    const bDate = new Date(b.CreatedAt || b.created_at || b.createdAt || 0);
                    return bDate - aDate;
                });
        }

        this.tasksContainer.innerHTML = sortedTasks.map(task => {
            // Ensure we have valid data
            const taskId = task.ID || task.id || '';
            const taskTitle = task.Title || task.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            const taskStatus = task.Status || task.status || 'not_started';
            const taskPriority = task.Priority || task.priority || 2;
            const createdAt = task.CreatedAt || task.created_at || task.createdAt || new Date().toISOString();
            const deadline = task.Deadline || task.deadline;
            // –ö—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            let statusHtml = '';
            if (taskStatus === 'not_started') {
                statusHtml = '<span class="task-status status-not-started">‚è≥ –ù–µ –Ω–∞—á–∞—Ç–∞</span>';
            } else if (taskStatus === 'in_progress') {
                statusHtml = '<span class="task-status status-in-progress">üöÄ –í –ø—Ä–æ—Ü–µ—Å—Å–µ</span>';
            } else if (taskStatus === 'done') {
                statusHtml = '<span class="task-status status-done">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞</span>';
            } else {
                statusHtml = `<span class="task-status">${this.getStatusLabel(taskStatus)}</span>`;
            }
            // –ö—Ä–∞—Å–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å"
            const startBtnHtml = taskStatus === 'not_started' ? `<button class="start-btn fancy-start-btn" data-task-id="${taskId}">‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å</button>` : '';
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'done' –¥–ª—è –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
            const doneClass = taskStatus === 'done' ? 'done' : '';
            return `
            <div class="task-item ${taskStatus === 'done' ? 'completed' : ''} ${this.isOverdue(task) ? 'overdue' : ''}">
                <div class="task-content">
                    <input 
                        type="checkbox" 
                        ${taskStatus === 'done' ? 'checked' : ''}
                        data-task-id="${taskId}"
                        class="task-checkbox"
                        ${taskStatus === 'not_started' ? 'disabled' : ''}
                    >
                    <div class="task-text">
                        <span class="${doneClass}">${this.escapeHtml(taskTitle)}</span>
                        ${task.Body || task.body ? `<p class="task-desc ${doneClass}">${this.escapeHtml(task.Body || task.body)}</p>` : ''}
                        <div class="task-meta ${doneClass}">
                            <span class="priority-badge ${this.getPriorityClass(taskPriority)}">
                                ${this.getPriorityLabel(taskPriority)}
                            </span>
                            ${statusHtml}
                            ${deadline ? `
                                <span class="due-date">
                                   –î–µ–¥–ª–∞–π–Ω: üìÖ ${this.formatDate(deadline)}
                                </span>
                            ` : ''}
                            <span class="created-date">
                                –°–æ–∑–¥–∞–Ω–æ: ${this.formatDate(createdAt)}
                            </span>
                        </div>
                        ${startBtnHtml}
                    </div>
                </div>
                <button 
                    class="delete-btn" 
                    data-task-id="${taskId}"
                    title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
                >
                    üóëÔ∏è
                </button>
            </div>
            `;
        }).join('');
        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º "–ù–∞—á–∞—Ç—å"
        const startBtns = this.tasksContainer.querySelectorAll('.start-btn');
        startBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const taskId = e.target.getAttribute('data-task-id');
                if (taskId && taskId.length > 0) {
                    this.startTask(taskId);
                }
            });
        });

        // Re-bind events after rendering
        this.bindTaskEvents();
    }
     // Add this helper method to generate UUIDs
    generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    bindTaskEvents() {
        // Add event listeners to checkboxes
        const checkboxes = this.tasksContainer.querySelectorAll('.task-checkbox');
        checkboxes.forEach(checkbox => {
            // Remove any existing event listener first to avoid duplicates
            checkbox.replaceWith(checkbox.cloneNode(true));
        });

        // Re-select checkboxes after cloning
        const newCheckboxes = this.tasksContainer.querySelectorAll('.task-checkbox');
        newCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const taskId = e.target.getAttribute('data-task-id');
                console.log('Checkbox changed for task:', taskId);
                if (taskId && taskId.length > 0) {
                    this.toggleTask(taskId);
                } else {
                    console.error('Invalid task ID:', taskId);
                }
            });
        });

        // Add event listeners to delete buttons
        const deleteButtons = this.tasksContainer.querySelectorAll('.delete-btn');
        deleteButtons.forEach(button => {
            // Remove any existing event listener first to avoid duplicates
            button.replaceWith(button.cloneNode(true));
        });

        // Re-select delete buttons after cloning
        const newDeleteButtons = this.tasksContainer.querySelectorAll('.delete-btn');
        newDeleteButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const taskId = e.target.getAttribute('data-task-id');
                console.log('Delete button clicked for task:', taskId);
                if (taskId && taskId.length > 0) {
                    this.showDeleteModalById(taskId);
                } else {
                    console.error('Invalid task ID for deletion:', taskId);
                }
            });
        });
    }

    showDeleteModalById(taskId) {
        console.log('Looking for task with ID:', taskId);
        const task = this.tasks.find(t => {
            const id1 = t.ID || t.id || '';
            console.log('Comparing:', id1, 'with', taskId);
            return id1 === taskId;
        });
        
        if (task) {
            console.log('Found task:', task);
            this.showDeleteModal(task);
        } else {
            console.error('Task not found with ID:', taskId, 'Available tasks:', this.tasks);
            alert('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }

    isOverdue(task) {
        if (!task.Deadline || task.Status === 'done') return false;
        const now = new Date();
        const deadline = new Date(task.Deadline);
        return deadline < now;
    }

    getPriorityClass(priority) {
        if (priority >= 3) return 'high';
        if (priority >= 2) return 'medium';
        return 'low';
    }

    getPriorityLabel(priority) {
        if (priority >= 3) return '–í—ã—Å–æ–∫–∏–π';
        if (priority >= 2) return '–°—Ä–µ–¥–Ω–∏–π';
        return '–ù–∏–∑–∫–∏–π';
    }

    getStatusLabel(status) {
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const statusLabels = {
            'not_started': '–ù–µ –Ω–∞—á–∞—Ç–∞',
            'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'done': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        };
        return statusLabels[status] || status;
    }


    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    formatDate(dateString) {
        if (!dateString) return '';
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (error) {
            console.error('Error formatting date:', error, dateString);
            return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
        }
    }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new TodoApp();
});
